import:
    - '../interest-rate.yaml'
    - '../renewable-techs.yaml'
    - '../storage-techs.yaml'
    - '../link-techs.yaml'
    - '../heat-techs.yaml'
    - '../transformation-techs.yaml'
    - '../transport-techs.yaml'
    - '../demand-techs.yaml'
    - '../legacy-techs.yaml'
    - '../spores.yaml'
    - '../fuel_scenarios.yaml'
    - '../demand_share.yaml'
    - '../max-cap-overrides.yaml'
    - '../overrides-2030/renewable-techs.yaml'
    - '../overrides-2030/storage-techs.yaml'
    - '../overrides-2030/heat-techs.yaml'
    - '../overrides-2030/transformation-techs.yaml'
    - '../config_overrides.yaml'
    - './locations.yaml'
    - './links.yaml'
    - './directional-rooftop.yaml'
    #- './outer-countries.yaml'  # todo add this in as an override option
    #- './vehicle_group_constraints.yaml' #problem with loading csv files
    - './heat_group_constraints.yaml'
    - './fuel_group_constraints.yaml'
    - './emissions_scenarios.yaml'
    - './gas_storage.yaml'
    - './coal_supply.yaml'
    - './fossil-fuel-supply.yaml'
    - './biofuel-supply.yaml'
model:
    name: 'Euro-Calliope'
    calliope_version: 0.6.6
    timeseries_data_path: './'
    subset_time: ['2018-01-01', '2018-12-31']
run:
    objective_options: {
        'cost_class': {'monetary': 1, 'spores_score': 0, 'excl_score': 0},
        'sense': 'minimize'
    }
    solver: gurobi
    # solver_io: python
    mode: plan
    solver_options:
        Threads: 6
        Method: 2 # use barrier, but do not run simplex in parallel
        Crossover: -0 # stop after barrier, do not perform crossover
        FeasibilityTol: 1e-3
        OptimalityTol: 1e-4
        BarConvTol: 1e-4
    spores_options:
        score_cost_class: 'spores_score'
        slack_cost_group: 'systemwide_cost_max'
        slack: 0.1
        spores_number: 100
        scoring_method: integer          
        save_per_spore: true
        save_per_spore_path: "../spore_results/spore_run_{}.nc"
        objective_cost_class: {spores_score: 1, excl_score: 0, monetary: 0}


overrides:
    no-hydro-costs:
        # Because we force all hydro to current levels, there
        # should be annual O&M costs and variable costs only.
        techs.pumped_hydro.costs.monetary.storage_cap: 0
        techs.pumped_hydro.costs.monetary.energy_cap: 0
        techs.hydro_run_of_river.costs.monetary.energy_cap: 0
        techs.hydro_run_of_river.costs.monetary.om_con: 0
        techs.hydro_reservoir.costs.monetary.storage_cap: 0
        techs.hydro_reservoir.costs.monetary.energy_cap: 0
        techs.hydro_reservoir.costs.monetary.om_con: 0
    stylised-storage:
        # Transform battery and hydrogen to stylised short term
        # and long term storage solutions.
        techs:
            load_shedding.exists: False
            battery:
                constraints:
                    energy_cap_per_storage_cap_min: 0.25 # max 4h full-power discharge
                costs:
                    monetary:
                        om_prod: 0 # ASSUME 0 instead of 0.000378 â‚¬/kWh, as the tiny number causes numerical issues
            hydrogen_storage:
                constraints:
                    energy_cap_per_storage_cap_max: 0.25 # min 4h full-power discharge

    res_2h:
        model.time:
            function: resample
            function_options.resolution: 2H
    res_3h:
        model.time:
            function: resample
            function_options.resolution: 3H
    res_6h:
        model.time:
            function: resample
            function_options.resolution: 6H
    res_12h:
        model.time:
            function: resample
            function_options.resolution: 12H

    res_5D:
        model.time:
            function: resample
            function_options.resolution: 5D

    res_14D:
        model.time:
            function: resample
            function_options.resolution: 14D 
    
    res_1M:
        model.time:
            function: resample
            function_options.resolution: 1M


    res_20k:
        model.time:
            function: apply_clustering
            function_options:
                clustering_func: kmeans
                how: mean
                k: 5

    res_50k:
        model.random_seed: 23
        model.time:
            function: apply_clustering
            function_options:
                clustering_func: kmeans
                how: mean
                k: 50

    res_1M_mask:
        model.time:
            masks:
                - {function: extreme, options: {padding: 'calendar_week', tech: 'wind_offshore', how: 'max'}}
                - {function: extreme, options: {padding: 'calendar_week', tech: 'wind_offshore', how: 'min'}}
            function: resample
            function_options: {'resolution': '1M'}
